"use strict";(self.webpackChunkdocumentation_lpo=self.webpackChunkdocumentation_lpo||[]).push([[417],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=u(n),f=r,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||s;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[d]="string"==typeof e?e:r,o[1]=a;for(var u=2;u<s;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var i=n(7462),r=(n(7294),n(3905));const s={},o=void 0,a={unversionedId:"FrontEnd/Gestion des Fiches Observations/Gestion des Fiches",id:"FrontEnd/Gestion des Fiches Observations/Gestion des Fiches",title:"Gestion des Fiches",description:"image",source:"@site/docs/FrontEnd/Gestion des Fiches Observations/Gestion des Fiches.md",sourceDirName:"FrontEnd/Gestion des Fiches Observations",slug:"/FrontEnd/Gestion des Fiches Observations/Gestion des Fiches",permalink:"/docs/FrontEnd/Gestion des Fiches Observations/Gestion des Fiches",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/FrontEnd/Gestion des Fiches Observations/Gestion des Fiches.md",tags:[],version:"current",frontMatter:{},sidebar:"myslidebar",previous:{title:"Introduction",permalink:"/docs/FrontEnd/Gestion des Fiches Observations/Introduction"},next:{title:"Introduction",permalink:"/docs/FrontEnd/Filtrer par Crit\xe8re Simple, Site ou Ponctuel/Introduction"}},l={},u=[],c={toc:u},d="wrapper";function p(e){let{components:t,...s}=e;return(0,r.kt)(d,(0,i.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("table",{Style:"width: 100%; border-top: 1px solid transparent;"},(0,r.kt)("tr",{Style:"display: flex;"},(0,r.kt)("td",{Style:"width: 1000px;   border: 1px solid transparent;  text-align: center; align: middle; margin-top:200px; "},(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(2504).Z,width:"274",height:"472"}))),(0,r.kt)("td",{Style:" border: 1px solid transparent;"},(0,r.kt)("th",null,"Le sous dossier Fiche de Feature contient l'ensemble des interface de sprint 2 que nous allons d\xe9tailler dans ce qui suit"),(0,r.kt)("p",null,"Le Fichier ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"addFicheService.js"))," du dossier addFiche_feature, utilise la biblioth\xe8que Axios pour effectuer des requ\xeates HTTP. Il impl\xe9mente trois fonctions pour g\xe9rer les fiches d'observations dans le contexte d'une application de suivi de la faune."),(0,r.kt)("p",null,"La premi\xe8re fonction s'appelle ficheSendService et elle envoie une fiche d'observation \xe0 un endpoint \"observateur/fiche-temporaire\" via une requ\xeate POST. La fonction prend une fiche en param\xe8tre et ajoute des informations d'authentification (le jeton d'acc\xe8s et l'e-mail de l'utilisateur) dans les en-t\xeates de la requ\xeate. La fonction renvoie la r\xe9ponse de la requ\xeate si elle r\xe9ussit et une erreur sinon."),(0,r.kt)("p",null,"La deuxi\xe8me fonction s'appelle ficheSaveService et elle enregistre une fiche d'observation dans une table temporaire via une requ\xeate POST \xe0 l'endpoint \"observateur/fiches-temporaire\". Comme la fonction pr\xe9c\xe9dente, elle prend une fiche en param\xe8tre et ajoute des informations d'authentification dans les en-t\xeates de la requ\xeate. La fonction renvoie la r\xe9ponse de la requ\xeate si elle r\xe9ussit et une erreur sinon."),(0,r.kt)("p",null,"La troisi\xe8me fonction s'appelle updateFicheService et elle met \xe0 jour une fiche d'observation existante via une requ\xeate PUT \xe0 l'endpoint \"observateur/fiche-temporaire/{id_fiche}\". La fonction prend une fiche en param\xe8tre qui contient l'identifiant de la fiche \xe0 mettre \xe0 jour et les nouvelles informations \xe0 lui appliquer. Elle ajoute \xe9galement les informations d'authentification dans les e!mn-t\xeates de la requ\xeate. La fonction renvoie la r\xe9ponse de la requ\xeate si elle r\xe9ussit et une erreur sinon."),(0,r.kt)("p",null,"Enfin, toutes ces fonctions sont regroup\xe9es dans un objet addFicheService qui est export\xe9 pour \xeatre utilis\xe9 dans d'autres parties de l'application."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Le Fichier ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"addFicheSlice.js"))," du addFiche_feature, utilise les biblioth\xe8ques Redux Toolkit pour g\xe9rer l'\xe9tat de l'application."),(0,r.kt)("p",null,"Les fonctions createAsyncThunk cr\xe9ent des actions asynchrones qui envoient une requ\xeate HTTP \xe0 un serveur pour r\xe9cup\xe9rer ou envoyer des donn\xe9es. Les actions renvoient une promesse qui peut \xeatre r\xe9solue ou rejet\xe9e en fonction du r\xe9sultat de la requ\xeate."),(0,r.kt)("p",null,"La fonction getCommunesAndEspeces r\xe9cup\xe8re les donn\xe9es de toutes les communes et esp\xe8ces \xe0 partir d'un service Web. Elle stocke \xe9galement les donn\xe9es dans le stockage local pour une utilisation ult\xe9rieure."),(0,r.kt)("p",null,"La variable initialState contient l'\xe9tat initial de l'application."),(0,r.kt)("p",null,"La fonction addFicheSlice d\xe9finit le slice Redux qui g\xe8re l'\xe9tat de l'application pour les actions de cr\xe9ation, de r\xe9cup\xe9ration, de mise \xe0 jour et de sauvegarde de fiches. Elle utilise extraReducers pour d\xe9finir comment l'\xe9tat est mis \xe0 jour en r\xe9ponse aux actions asynchrones."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Le Fichier ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"getFicheService.jsx"))," du dossier getFiche_feature exporte un objet getFicheService contenant plusieurs fonctions asynchrones pour interagir avec une API."),(0,r.kt)("p",null,"Les fonctions incluses dans l'objet getFicheService sont les suivantes :"),(0,r.kt)("p",null,"getAllFicheObs(code): R\xe9cup\xe8re toutes les fiches temporaires d'un observateur en fournissant le code de l'observateur en tant que param\xe8tre. Cette fonction envoie une requ\xeate HTTP GET \xe0 l'API avec des param\xe8tres de requ\xeate et des en-t\xeates d'autorisation."),(0,r.kt)("p",null,"getOneFicheTemporaire(idFiche): R\xe9cup\xe8re une fiche temporaire unique en fournissant l'identifiant de la fiche en tant que param\xe8tre. Cette fonction envoie une requ\xeate HTTP GET \xe0 l'API avec des en-t\xeates d'autorisation."),(0,r.kt)("p",null,"getAllFicheLibreService(): R\xe9cup\xe8re toutes les fiches temporaires en \xe9tat libre en envoyant une requ\xeate HTTP GET \xe0 l'API avec des param\xe8tres de requ\xeate et des en-t\xeates d'autorisation."),(0,r.kt)("p",null,"deleteFicheTemporaireService(id_fiche): Supprime une fiche temporaire unique en fournissant l'identifiant de la fiche en tant que param\xe8tre. Cette fonction envoie une requ\xeate HTTP DELETE \xe0 l'API avec des en-t\xeates d'autorisation."),(0,r.kt)("p",null,"Les requ\xeates HTTP sont effectu\xe9es en utilisant la biblioth\xe8que axios qui est import\xe9e en tant que useAxios. Les en-t\xeates d'autorisation contiennent le jeton d'authentification et l'adresse e-mail de l'utilisateur stock\xe9s localement. La constante ETAT_FICHE_LIBRE est import\xe9e depuis un module utilFiche.jsx."),(0,r.kt)("p",null,"L'ensemble du script semble \xeatre \xe9crit en ES6 et est con\xe7u pour \xeatre utilis\xe9 dans un environnement de d\xe9veloppement Node.js."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Le Fichier ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"getFicheSlice.jsx"))," du dossier getFiche_feature utilise la biblioth\xe8que Redux Toolkit pour cr\xe9er des tranche (slices) de store Redux qui g\xe8rent l'\xe9tat d'une application React."),(0,r.kt)("p",null,"Il d\xe9finit plusieurs actions asynchrones cr\xe9\xe9es \xe0 l'aide de la fonction createAsyncThunk. Ces actions utilisent des services externes pour r\xe9cup\xe9rer des donn\xe9es ou les modifier, et mettent \xe0 jour l'\xe9tat du store Redux en fonction de leurs r\xe9sultats."),(0,r.kt)("p",null,"Le slice cr\xe9\xe9 dans ce code a un \xe9tat initial avec plusieurs propri\xe9t\xe9s qui refl\xe8tent l'\xe9tat de chargement des donn\xe9es. Il contient \xe9galement des reducers pour trier les fiches en fonction de leur date."),(0,r.kt)("p",null,"Les extraReducers sont des fonctions qui sont automatiquement ajout\xe9es au slice et sont appel\xe9es lorsqu'une action est trait\xe9e par le slice. Ces extraReducers g\xe8rent les \xe9tats de chargement, d'erreur et de r\xe9ussite pour chaque action asynchrone cr\xe9\xe9e avec createAsyncThunk."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Le Fichier ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"validerFicheService.jsx"))," du dossier validerFiche_feature, utilise la biblioth\xe8que useAxios pour effectuer une requ\xeate POST \xe0 un endpoint validateur/fiche-valide."),(0,r.kt)("p",null,"La fonction validerOneFicheService est une fonction asynchrone qui prend un objet fiche comme param\xe8tre. Elle envoie une requ\xeate POST \xe0 l'endpoint validateur/fiche-valide avec l'objet fiche comme corps de la requ\xeate et deux en-t\xeates Authorization et email avec des valeurs extraites du localStorage. Si la requ\xeate r\xe9ussit, la fonction renvoie la r\xe9ponse, sinon elle renvoie une erreur."),(0,r.kt)("p",null,"Ensuite, l'objet validerFicheService est cr\xe9\xe9 avec une propri\xe9t\xe9 validerOneFicheService, qui fait r\xe9f\xe9rence \xe0 la fonction validerOneFicheService. Cet objet est export\xe9 par d\xe9faut pour \xeatre utilis\xe9 dans d'autres fichiers JavaScript."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Le Fichier ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"validerFicheSlice.jsx"))," du dossier validerFiche_feature, utilise Redux Toolkit pour g\xe9rer un \xe9tat asynchrone dans une application React."),(0,r.kt)("p",null,"La fonction createAsyncThunk cr\xe9e une action asynchrone qui peut \xeatre utilis\xe9e dans les reducers pour mettre \xe0 jour l'\xe9tat de l'application en fonction du r\xe9sultat de l'op\xe9ration asynchrone. Dans cet exemple, la fonction validerOneFiche est cr\xe9\xe9e pour valider une fiche. Elle appelle la fonction validerOneFicheService qui effectue la requ\xeate HTTP pour valider la fiche."),(0,r.kt)("p",null,"Le validerFicheSlice est un slice de Redux qui d\xe9finit l'\xe9tat initial de l'application et les reducers qui peuvent \xeatre utilis\xe9s pour modifier cet \xe9tat. Dans cet exemple, il n'y a pas de reducer d\xe9fini car l'action est g\xe9r\xe9e par extraReducers."),(0,r.kt)("p",null,"Le extraReducers est un objet qui d\xe9finit la mani\xe8re dont l'\xe9tat de l'application doit \xeatre mis \xe0 jour en fonction du r\xe9sultat de l'action asynchrone. Dans cet exemple, l'\xe9tat de l'application est mis \xe0 jour en fonction des trois cas possibles: pending, rejected et fulfilled. L'\xe9tat est mis \xe0 jour avec les propri\xe9t\xe9s isLoading, isError et isSuccess en fonction du cas."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Le Fichier ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Espece&communeService.jsx"))," du dossier Fiche, c'est une collection de deux fonctions qui appellent deux endpoints diff\xe9rents de l'API \xe0 l'aide de useAxios, qui semble \xeatre un hook personnalis\xe9 pour faire des requ\xeates HTTP avec axios."),(0,r.kt)("p",null,"La premi\xe8re fonction, getAllEspeceService, appelle l'endpoint /api/especes et renvoie une promesse r\xe9solue avec la r\xe9ponse si la requ\xeate est r\xe9ussie, ou une promesse rejet\xe9e avec l'erreur si elle \xe9choue. Les requ\xeates HTTP incluent \xe9galement un en-t\xeate avec un jeton d'authentification et une adresse e-mail stock\xe9e dans le localStorage."),(0,r.kt)("p",null,"La deuxi\xe8me fonction, getAllcommunesService, appelle l'endpoint /api/communes et suit la m\xeame logique que getAllEspeceService."),(0,r.kt)("p",null,"Enfin, les deux fonctions sont regroup\xe9es dans un objet especeCommuneService et export\xe9es.")))))}p.isMDXComponent=!0},2504:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/capFiche-7ccbc1ff85e9604bee212bf43e9616fa.png"}}]);
"use strict";(self.webpackChunkdocumentation_lpo=self.webpackChunkdocumentation_lpo||[]).push([[821],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3050:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={},o=void 0,s={unversionedId:"Migration de base de donn\xe9es/Base MySQL/Doctrine",id:"Migration de base de donn\xe9es/Base MySQL/Doctrine",title:"Doctrine",description:"Doctrine est un framework ORM (Object-Relational Mapping) pour PHP. L'ORM est une technique de programmation qui permet de faciliter la communication entre une base de donn\xe9es relationnelle et une application orient\xe9e objet. En utilisant l'ORM, les d\xe9veloppeurs peuvent travailler avec des objets en m\xe9moire plut\xf4t qu'avec des requ\xeates SQL brutes, ce qui simplifie le d\xe9veloppement d'applications en \xe9vitant les t\xe2ches r\xe9p\xe9titives et fastidieuses de cr\xe9ation et de manipulation d'objets de la base de donn\xe9es.",source:"@site/docs/Migration de base de donn\xe9es/Base MySQL/Doctrine.md",sourceDirName:"Migration de base de donn\xe9es/Base MySQL",slug:"/Migration de base de donn\xe9es/Base MySQL/Doctrine",permalink:"/Documentation-LPO/docs/Migration de base de donn\xe9es/Base MySQL/Doctrine",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Migration de base de donn\xe9es/Base MySQL/Doctrine.md",tags:[],version:"current",frontMatter:{},sidebar:"myslidebar",previous:{title:"Access TO MySQL",permalink:"/Documentation-LPO/docs/Migration de base de donn\xe9es/Base Access/Migration Access to MySQL"},next:{title:"Nos Entity",permalink:"/Documentation-LPO/docs/Migration de base de donn\xe9es/Base MySQL/Nos Entity"}},l={},u=[],c={toc:u},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Doctrine est un framework ORM (Object-Relational Mapping) pour PHP. L'ORM est une technique de programmation qui permet de faciliter la communication entre une base de donn\xe9es relationnelle et une application orient\xe9e objet. En utilisant l'ORM, les d\xe9veloppeurs peuvent travailler avec des objets en m\xe9moire plut\xf4t qu'avec des requ\xeates SQL brutes, ce qui simplifie le d\xe9veloppement d'applications en \xe9vitant les t\xe2ches r\xe9p\xe9titives et fastidieuses de cr\xe9ation et de manipulation d'objets de la base de donn\xe9es."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Doctrine permet ainsi de faciliter l'impl\xe9mentation des fonctionnalit\xe9s CRUD (Create, Read, Update, Delete) en fournissant une interface simple et intuitive pour manipuler les donn\xe9es de la base de donn\xe9es. Elle offre \xe9galement d'autres fonctionnalit\xe9s utiles comme la gestion des relations entre les tables, la validation des donn\xe9es et la gestion des transactions.")),(0,r.kt)("h1",{id:"la-cr\xe9ation-dentit\xe9s-en-utilisant-doctrine-se-fait-g\xe9n\xe9ralement-en-suivant-ces-\xe9tapes-"},"La cr\xe9ation d'entit\xe9s en utilisant Doctrine se fait g\xe9n\xe9ralement en suivant ces \xe9tapes :"),(0,r.kt)("p",null,"  1- Ouvrir le terminal : Ouvrez le terminal et naviguez jusqu'au r\xe9pertoire du projet Symfony."),(0,r.kt)("p",null,"  2- Installer Doctrine : Doctrine est un ORM (Object-Relational Mapping) qui permet de faciliter la manipulation de la base de donn\xe9es dans Symfony. Pour l'installer, ex\xe9cutez la commande suivante :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"composer require symfony/orm-pack\n")),(0,r.kt)("p",null,"  3- Configurer la base de donn\xe9es : Dans le fichier .env \xe0 la racine de votre projet, ajoutez les informations de connexion \xe0 votre base de donn\xe9es."),(0,r.kt)("p",null,"  4- Cr\xe9er l'entit\xe9 : Pour cr\xe9er une entit\xe9, utilisez la commande suivante :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php bin/console make:entity\n")),(0,r.kt)("p",null,"  Cette commande vous guidera \xe0 travers les \xe9tapes de cr\xe9ation de l'entit\xe9. Vous devrez fournir un nom pour l'entit\xe9 et sp\xe9cifier les propri\xe9t\xe9s que vous souhaitez ajouter. Vous pouvez \xe9galement ajouter des relations entre les entit\xe9s."),(0,r.kt)("p",null,"   5- G\xe9n\xe9rer les getters et setters : Les getters et setters permettent d'acc\xe9der et de modifier les propri\xe9t\xe9s d'une entit\xe9. Pour les g\xe9n\xe9rer automatiquement, utilisez la commande suivante :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php bin/console make:entity --regenerate\n")),(0,r.kt)("p",null,"   6- Cr\xe9er la table : Pour cr\xe9er la table correspondante \xe0 l'entit\xe9, utilisez la commande suivante :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php bin/console doctrine:schema:update --force\n")),(0,r.kt)("p",null,"Cette commande cr\xe9era la table dans la base de donn\xe9es en utilisant les informations d\xe9finies dans l'entit\xe9."),(0,r.kt)("p",null,"Ces \xe9tapes vous permettent de cr\xe9er et d'utiliser des entit\xe9s dans votre projet Symfony. Il est important de noter que la cr\xe9ation d'entit\xe9s est un processus it\xe9ratif et que vous devrez peut-\xeatre modifier votre sch\xe9ma de base de donn\xe9es et vos entit\xe9s au fur et \xe0 mesure que votre projet \xe9volue."),(0,r.kt)("h1",{id:"migration"},"Migration"),(0,r.kt)("p",null," La migration permet de g\xe9rer les changements dans le sch\xe9ma de la base de donn\xe9es tout en conservant les donn\xe9es existantes. Voici les \xe9tapes pour effectuer une migration dans un projet Symfony :"),(0,r.kt)("p",null,"   1- Cr\xe9er une nouvelle migration : Pour cr\xe9er une nouvelle migration, utilisez la commande suivante :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php bin/console make:migration\n")),(0,r.kt)("p",null,"Cette commande va cr\xe9er un fichier de migration dans le dossier src/Migrations."),(0,r.kt)("p",null,"   2- \xc9diter la migration : Ouvrez le fichier de migration et ajoutez les instructions pour la modification de la base de donn\xe9es. Vous pouvez ajouter des colonnes, des tables, des cl\xe9s \xe9trang\xe8res, etc."),(0,r.kt)("p",null,"   3- Ex\xe9cuter la migration : Pour ex\xe9cuter la migration, utilisez la commande suivante :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php bin/console doctrine:migrations:migrate\n")),(0,r.kt)("p",null,"Cette commande ex\xe9cutera toutes les migrations qui n'ont pas encore \xe9t\xe9 ex\xe9cut\xe9es."),(0,r.kt)("p",null,"   4- V\xe9rifier la migration : V\xe9rifiez que la migration a \xe9t\xe9 ex\xe9cut\xe9e correctement en v\xe9rifiant la base de donn\xe9es. Vous pouvez \xe9galement utiliser la commande suivante pour afficher l'historique des migrations :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php bin/console doctrine:migrations:status\n")),(0,r.kt)("p",null,"Cette commande affichera l'\xe9tat actuel de la base de donn\xe9es et de toutes les migrations."),(0,r.kt)("p",null,"   5- R\xe9verser une migration : Si vous avez besoin de r\xe9verser une migration, vous pouvez utiliser la commande suivante :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"php bin/console doctrine:migrations:execute <migration_version> --down\n")),(0,r.kt)("p",null,"Remplacez <migration_version> par le num\xe9ro de version de la migration que vous souhaitez r\xe9verser."))}p.isMDXComponent=!0}}]);